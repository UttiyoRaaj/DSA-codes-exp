Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.
Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
nums is sorted in non-decreasing order.
 








=========================================






Answer


Approach : 

ðŸŽ¯ Step 1: Clarify the Problem
âœ… Array is sorted â†’ duplicates will be adjacent.
âœ… Modify array in-place â†’ canâ€™t use another array.
âœ… Must return count of unique elements (k), not the array itself.


ðŸ’¡ Step 2: Approach Discussion
ðŸ”¹ Intuition
Since the array is sorted, duplicates always appear consecutively.
We can use two pointers:
slow â†’ tracks the position of the last unique element.
fast â†’ scans through the array.
Whenever we find a new unique element, we move it to the next position of slow.
ðŸ”¹ Steps
Initialize slow = 0.
Traverse array with fast from index 1 to n - 1.
If nums[fast] != nums[slow], increment slow and assign nums[slow] = nums[fast].
After traversal, the length of unique elements = slow + 1.

This yields O(n) time and O(1) space complexity


Code snippet :

class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0) return 0;
        int slow = 0;
        for (int fast = 1; fast < nums.length; fast++) {
            if (nums[fast] != nums[slow]) {
                slow++;
                nums[slow] = nums[fast];
            }
        }
        return slow + 1;
    }
}





Q1. What if interviewer asks for all unique numbers to be returned instead of modifying in place?

Then we can use a Set<Integer> to collect unique elements, but that increases space complexity to O(n).

Q5. What if interviewer adds a constraint â€” keep at most 2 duplicates?

Thatâ€™s LeetCode 80: Remove Duplicates from Sorted Array II.
Logic is similar but you allow each element up to twice:
if (i < 2 || nums[i] != nums[j - 2]) nums[j++] = nums[i];