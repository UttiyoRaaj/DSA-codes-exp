Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Example 3:

Input: nums = [1,0,1,2]
Output: 3
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
 








=========================================






Answer


Approach : 

Brute : 
Sort the array (O(n log n))
Then iterate and count consecutive numbers (O(n))

Optimal : HashSet + Smart Traversal
Add all elements into a HashSet (O(n)).
Iterate through each number:
If num - 1 doesnâ€™t exist, it means num is start of a sequence.
Then, count forward (num + 1, num + 2, â€¦) until sequence breaks.
Keep track of the maximum length seen so far.
ðŸ‘‰ Each element is visited at most twice, so overall time is O(n).

Time: O(n) â€” each number is processed at most twice. Space: O(n) â€” for the HashSet.


Code snippet :

class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) return 0;

        HashSet<Integer> set = new HashSet<>();
        for (int num : nums) set.add(num);
        int longest = 0;

        for (int num : set) {
            if (!set.contains(num - 1)) {
                int currentNum = num;
                int currentStreak = 1;

                while (set.contains(currentNum + 1)) {
                    currentNum++;
                    currentStreak++;
                }

                longest = Math.max(longest, currentStreak);
            }
        }
        return longest;
    }
}





Q1. What if duplicates exist?
â†’ HashSet automatically removes duplicates, so no issue.