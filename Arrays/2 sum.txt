Approach : 

Brute :- Compare each elements with all other elements. 2 Loops req(nested). Outer loop iterates from the first element to the second-to-last element, and the inner loop iterates from the next element to the last element TC = O(n2).

Optimum :- Use a HashMap in Java. We can iterate through the array once, and for each element, check if the target minus the current element exists in the hash map. If it does, we have found a valid pair of numbers. If not, we add the current element to the hash map. Also create a fixed length array to store the result (idx1, idx2).




Code snippet :

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int ans[] = new int[2];
        int second_no;
        for (int i=0;i<nums.length;i++) {
            second_no = target - nums[i];
            if (map.containsKey(second_no)) {
                ans[0] = map.get(second_no);
                ans[1] = i;
            }
            else
                map.put(nums[i], i);
        }
        return ans;
    }
}