Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105







=========================================






Answer

Approach : 

Brute :- Consider all triplets. TC = O(n2)

Optimum(2 pointer approach) :- Use a HashMap in Java. Iterate i over the pair(j,k). Use j,k as 2 pointer approach. Remove duplicates by those while statements. TC = O(nlogn) + O(n2) = O(n2). SC = O(n) for storing no. of results.




Code snippet :

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums); //nlog(n)
        for (int i=0;i<nums.length;i++) {
            if (i==0 || nums[i] != nums[i-1]) {
                int target = 0 - nums[i];
                int j = i+1, k = nums.length-1, count=0;
                while (j<k) {
                    if (nums[j] + nums[k] == target) {
                        List<Integer> answer = Arrays.asList(nums[i], nums[j], nums[k]);
                        result.add(answer);

                        //removing duplicate triplets by this approach
                        while (j<k && nums[j] == nums[j+1]) j++;
                        //removing duplicate triplets by this approach
                        while (j<k && nums[k] == nums[k-1]) k--;

                        j++;k--;
                    } else if (nums[j] + nums[k] < target) {
                        j++;
                    } else {
                        k--;
                    }
                }
            }
        }
        return result;
    }
}