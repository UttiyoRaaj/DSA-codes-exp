You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104






=========================================






Answer

Approach : 

❌ Brute Force Approach
Try all pairs (i, j) where i < j

✅ Optimal Approach — 
At each day i:
minPrice = lowest price so far (best buy opportunity)
profit = currentPrice - minPrice
Update maxProfit if this profit is greater
This gives a linear scan solution.

Time: O(n) (one pass), Space: O(1) (constant extra space)


Code snippet :

class Solution {
    public int maxProfit(int[] prices) {
        int minprice = prices[0], maxprofit = -1;
        for (int price : prices) {
            if (price < minprice) {
                minprice = price;
            }
            maxprofit = Math.max(maxprofit, price-minprice);
        }
        return maxprofit;
    }
}




Q1 What if you can buy and sell multiple times?
→ That’s LeetCode 122 (Best Time to Buy and Sell Stock II). You sum all increasing profits.

Q2 an this be extended to k transactions?
→ Yes — dynamic programming (LeetCode 188) required.

Q3 What if there’s a cooldown or transaction fee?
→ You’d use DP with additional states (e.g., hold, sold, cooldown).